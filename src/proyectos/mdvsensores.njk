---
layout: layoutProject.njk
projectIndex: 0
summary:  
  title: "Monitoreo remoto - proyecto completo"
  subtitle: "Puntos importantes del proyecto"
  links:
    - href: "#caracteristicas"
      text: "caracteristicas"
    - href: "#imagenes"
      text: "imagenes"
    - href: "#habilidades"
      text: "habilidades"
    - href: "#tecnologias"
      text: "tecnologias"    
---

{% include "showProjectHeader.njk" %}

{% include "indexSummary.njk" %}

{% set images = projects.list[projectIndex].images  %}
{% include "portfolioSlider.njk" %}

<section class="section" id="proyecto_contenido" >

  <h3 class="title2"  id="{{ summary.links[0].text }}">üìù {{ summary.links[0].text }} </h3>    

  <p>  
    Esta aplicaci√≥n, con una arquitectura <strong>SPA (Single Page Application)</strong> y un backend <strong>API RESTful</strong>, est√° dise√±ada para la administraci√≥n de usuarios, equipos electr√≥nicos y datos de funcionamiento de equipos electromec√°nicos. Los datos se monitorean <strong>24/7</strong> y el sistema notifica cambios cr√≠ticos a los responsables de cada √°rea.
  </p>  
  <p>
    Adem√°s, el servidor ejecuta <strong>cronJobs</strong> para supervisar los dispositivos, verificando que no excedan los niveles de alarma predefinidos. Si se superan estos umbrales, se env√≠an notificaciones por correo electr√≥nico a los responsables del √°rea mediante <strong>NodeMailer</strong>.
  </p>
    

  <h3 class="title2" id="{{ summary.links[2].text }}">üõ†Ô∏è {{ summary.links[2].text }} </h3>

  <p>  
    En este proyecto, apliqu√© una variedad de habilidades t√©cnicas para lograr un resultado robusto y funcional:
  </p>
  <ul>
    <li>
      <strong>üé® Figma:</strong> Lo utilic√© para el dise√±o integral de la interfaz gr√°fica. Cre√© componentes para las distintas secciones, aplicando principios de <strong>Atomic Design</strong>, lo que facilit√≥ la posterior implementaci√≥n en React.js.
    </li>
    <li>
      <strong>‚öõÔ∏è React.js:</strong> Siguiendo el dise√±o de Figma, desarroll√© el frontend de la aplicaci√≥n web consumiendo la API. Para ello, emple√© herramientas como <strong>Vite.js</strong>, <strong>useContext</strong>, <strong>Axios</strong>, <strong>dotenv</strong>, <strong>crypto-js</strong> y <strong>use-local-storage-state</strong>.
    </li>
    <li>
      <strong>üöÄ Node.js:</strong> Implement√© un servidor web con <strong>Express</strong> como una <strong>API</strong> que sirve datos desde una base de datos <strong>MySQL</strong>. Todas las consultas se escribieron sin el uso de un ORM. Se crearon alrededor de <strong>40 endpoints</strong>, la mayor√≠a protegidos con un middleware que utiliza <strong>JSON Web Token (JWT)</strong> y <strong>bcrypt</strong> para el almacenamiento seguro de datos cr√≠ticos.
    </li>
    <li>
      <strong>‚è∞ CronJobs y Notificaciones:</strong> El servidor ejecuta tareas programadas (cronJobs) para monitorear constantemente los datos de los dispositivos. Si se detectan anomal√≠as que superan los niveles de alarma, se env√≠an alertas por correo electr√≥nico a los responsables utilizando <strong>NodeMailer</strong>.
    </li>
  </ul>
 

  <h3 class="title2" id="{{ summary.links[3].text }}">üöÄ {{ summary.links[3].text }} </h3>
  <p>  
    Para el desarrollo de esta aplicaci√≥n, utilic√© una variedad de tecnolog√≠as y herramientas que me permitieron crear una experiencia de usuario atractiva y funcional. Entre las principales tecnolog√≠as que emple√© se encuentran: <strong>React.js</strong>, <strong>Node.js</strong>, <strong>Express</strong>, <strong>MySQL</strong>, <strong>JWT</strong>, <strong>bcrypt</strong>, <strong>Nodemailer</strong>, <strong>Figma</strong>, <strong>Vite.js</strong> y <strong>Axios</strong>.
  </p>


  

</section>
